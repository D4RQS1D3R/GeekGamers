/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <cstrike>
#include <fun>
#include <fakemeta_util>

#define PLUGIN "Furien Anti-Camp"
#define VERSION "1.0.1"
#define AUTHOR "Kia"

// ===============================================================================
// 	Editing begins here
// ===============================================================================

// ===============================================================================
// 	General
// ===============================================================================

// Time in Seconds how fast the Plugin checks for camping
#define CHECK_FREQ 1.0

// Radius in Units in which the player will be checked for camping in CHECK_FREQ
#define CHECK_RADIUS 400.0

// Time in Seconds how long camping in a area is allowed
#define CAMP_MAX 10.0

// ===============================================================================
// 	Camping - Punishments
// ===============================================================================

// Comment if you don't want the blast ring around campers
#define CAMPER_BLAST

// Comment if you don't want the camper sound
//#define CAMPER_SOUND

#if defined CAMPER_SOUND

// Sound File for Camper Sound
#define CAMPER_SOUND_FILE "player/heartbeat1.wav"

#endif

// Comment if you don't want the camper losing money
#define CAMPER_MONEY

#if defined CAMPER_MONEY

// Sets the amount of money lost per intervall for being a camper
#define CAMPER_MONEY_AMOUNT 500

#endif

// Comment if you don't want the camper losing health
#define CAMPER_HEALTH

#if defined CAMPER_HEALTH

// Sets the amount of health lost per intervall for being a camper
#define CAMPER_HEALTH_AMOUNT 5

#endif

// Comment if you don't want a chat message for the camper
#define CAMPER_ADVICE

#if defined CAMPER_ADVICE

// Message for Camper
#define CAMPER_MSG "You're camping. You will be punished! Stop camping now!"

#endif

// ===============================================================================
// 	Anti-C4-Camp
// ===============================================================================

// Comment if you don't want C4 Camping Check
#define CHECK_C4

#if defined CHECK_C4

// Radius in Units in which the player will be check for being around C4
#define C4_RADIUS 300.0

// Message for players that are near C4
#define C4_MESSAGE "You are too near to the C4, you have %1.f to get away from the C4."

// Time in Seconds how long you're allowed to camp at Bomb
#define C4_CAMPTIME 15.0

// ===============================================================================
// 	Camping - Punishments
// ===============================================================================

// Comment if you don't want the blast ring around campers
#define C4_BLAST

// Comment if you don't want the camper sound
//#define C4_SOUND

#if defined C4_SOUND

// Sound File for Camper Sound
#define C4_SOUND_FILE "player/heartbeat1.wav"

#endif

// Comment if you don't want the camper losing money
#define C4_MONEY

#if defined C4_MONEY

// Sets the amount of money lost per intervall for being a camper
#define C4_MONEY_AMOUNT 500

#endif

// Comment if you don't want the camper losing health
#define C4_HEALTH

#if defined C4_HEALTH

// Sets the amount of health lost per intervall for being a camper
#define C4_HEALTH_AMOUNT 5

#endif

#endif

// ===============================================================================
// 	and stops here. DO NOT MODIFY BELOW UNLESS YOU KNOW WHAT YOU'RE DOING
// ===============================================================================

// ===============================================================================
// 	Variables - Core Checking
// ===============================================================================

/* Defines */

#define TASK_ID_CORE 1912
#define TASK_ID_POS 1914
#define TASK_ID_CORE2 1915

/* Floats */

new g_flLastPos[33][3]
new Float:g_flTimeCamp[33]

/* Precache */

#if defined CAMPER_BLAST
new m_iSpriteTexture
#endif

/* HUD */

// ===============================================================================
// 	Variables - C4 Checking (if defined)
// ===============================================================================

#if defined CHECK_C4

/* Defines */

#define TASK_ID_C4 1913

/* Integer */

new Float:g_flTimeC4[33]

/* HUD */

new SyncObj

#endif

// ===============================================================================
// 	plugin_precache - Downloading Files
// ===============================================================================

public plugin_precache()
{
	#if defined CAMPER_SOUND
	precache_sound(CAMPER_SOUND_FILE)
	#endif
	
	#if defined C4_SOUND
	precache_sound(C4_SOUND_FILE)
	#endif

	m_iSpriteTexture = precache_model("sprites/shockwave.spr")
}


// ===============================================================================
// 	plugin_init
// ===============================================================================

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	/* Hamsandwich */
	
	RegisterHam(Ham_Spawn, "player", "func_HamSpawn", 1)
	
	/* Events */
	
	register_event("DeathMsg", "Event_DeathMsg", "a")
	
	/* Log Events */
	
	register_logevent("LogEvent_BombPlanted", 3, "2=Planted_The_Bomb")
	
	#if defined CHECK_C4
	SyncObj = CreateHudSyncObj()
	#endif
}

// ===============================================================================
// 	Client Connect
// ===============================================================================

public client_putinserver(id)
{
	g_flLastPos[id][0] = 0
	g_flTimeCamp[id] = 0.0
	
	#if defined CHECK_C4
	g_flTimeC4[id] = 0.0
	#endif
}

// ===============================================================================
// 	Client Disconnect
// ===============================================================================

public client_disconnect(id)
{
	g_flLastPos[id][0] = 0
	g_flTimeCamp[id] = 0.0
	
	#if defined CHECK_C4
	g_flTimeC4[id] = 0.0
	#endif
}

// ===============================================================================
// 	Hamsandwich - On Player Spawn
// ===============================================================================

public func_HamSpawn(id)
{
	if(task_exists(id + TASK_ID_POS))
		remove_task(id + TASK_ID_POS)
	
	if(task_exists(id + TASK_ID_CORE))
		remove_task(id + TASK_ID_CORE)
	
	#if defined CHECK_C4
	if(task_exists(id + TASK_ID_C4))
		remove_task(id + TASK_ID_C4)
	g_flTimeC4[id] = 0.0
	#endif
	
	g_flTimeCamp[id] = 0.0
	
	if(!is_user_alive(id) || cs_get_user_team(id) != CS_TEAM_CT)
		return PLUGIN_HANDLED
	
	get_user_origin(id, g_flLastPos[id])

	set_task(CAMP_MAX, 	"func_GetPosition", 		id + TASK_ID_POS, 	"", 0, "b")
	set_task(CHECK_FREQ, 	"func_CheckForCamping", 	id + TASK_ID_CORE, 	"", 0, "b")
	
	
	#if defined CHECK_C4
	g_flTimeC4[id] = 0.0
	
	set_task(CHECK_FREQ, "func_CheckForC4", id + TASK_ID_C4, "", 0, "b")
	#endif
	
	return PLUGIN_HANDLED
}

// ===============================================================================
// 	Events - On players Death
// ===============================================================================

public Event_DeathMsg()
{
	new iVictim = read_data(2)
	
	remove_task(iVictim + TASK_ID_CORE)
	g_flTimeCamp[iVictim] = 0.0
	
	#if defined CHECK_C4
	remove_task(iVictim + TASK_ID_C4)
	g_flTimeC4[iVictim] = 0.0
	#endif
}

// ===============================================================================
// 	Log Event - Bomb has been planted
// ===============================================================================

public LogEvent_BombPlanted()
{
	new players[32], pnum, id
	get_players(players, pnum, "ae", "CT")
	
	for( new i; i<pnum; i++ ) 
	{
		id = players[i]
		if(task_exists(id + TASK_ID_POS))
			remove_task(id + TASK_ID_POS)
	
		if(task_exists(id + TASK_ID_CORE))
			remove_task(id + TASK_ID_CORE)
			
		#if defined CHECK_C4
		if(task_exists(id + TASK_ID_C4))
			remove_task(id + TASK_ID_C4)
		#endif
	}
}

// ===============================================================================
// 	func_GetPosition - Saving players position
// ===============================================================================

public func_GetPosition(id)
{
	id -= TASK_ID_POS
	get_user_origin(id, g_flLastPos[id])
}

// ===============================================================================
// 	func_CheckForCamping - Getting players position and check if he camps.
// ===============================================================================

public func_CheckForCamping(id)
{
	id -= TASK_ID_CORE
	
	if(!is_user_alive(id) || cs_get_user_team(id) != CS_TEAM_CT)
		return PLUGIN_HANDLED
	
	new flTempPos[3]
	get_user_origin(id, flTempPos, 0)
	
	if(get_distance(flTempPos, g_flLastPos[id]) <= CHECK_RADIUS)
		g_flTimeCamp[id] += CHECK_FREQ
	else
		if(g_flTimeCamp[id] > 0)
			g_flTimeCamp[id] -= CHECK_FREQ

	if(g_flTimeCamp[id] >= CAMP_MAX)
		punish_camper(id)
	
	return PLUGIN_HANDLED
}

// ===============================================================================
// 	func_CheckForC4 - Checking if player is too near to droppped Bomb
// ===============================================================================

public func_CheckForC4(id)
{
	id -= TASK_ID_C4
	
	new iBomb = fm_find_ent_by_class(-1, "weapon_c4")
	if(iBomb && pev(iBomb, pev_owner) > get_maxplayers())
	{
		new Float:flOriginBomb[3]
		pev(iBomb, pev_origin, flOriginBomb)
		
		new Float:flOriginPlayer[3]
		pev(id, pev_origin, flOriginPlayer)
		
		if(get_distance_f(flOriginBomb, flOriginPlayer) <= C4_RADIUS)
		{
			set_hudmessage(255, 255, 255, -1.0, -1.0, 0, 6.0, CHECK_FREQ)
			ShowSyncHudMsg(id, SyncObj, C4_MESSAGE, C4_CAMPTIME - g_flTimeC4[id])
			
			g_flTimeC4[id] += CHECK_FREQ
			
			if(g_flTimeC4[id] >= C4_CAMPTIME)
				punish_c4camper(id)
		}
	}
}
			

// ===============================================================================
// 	punish_camper - Punishing Player for being a camper
// ===============================================================================

public punish_camper(id)
{
	#if defined CAMPER_BLAST
	create_blast_at_camper(id)
	#endif
	
	#if defined CAMPER_SOUND
	emit_sound(id, CHAN_ITEM, CAMPER_SOUND_FILE, VOL_NORM, ATTN_NORM, 0, PITCH_NORM );
	#endif
	
	#if defined CAMPER_HEALTH
	set_user_health(id, get_user_health(id) - CAMPER_HEALTH_AMOUNT)
	#endif
	
	#if defined CAMPER_MONEY
	if(cs_get_user_money(id) >= CAMPER_MONEY_AMOUNT)
		cs_set_user_money(id, cs_get_user_money(id) - CAMPER_MONEY_AMOUNT)
	#endif
	
	#if defined CAMPER_MSG
	client_print(id, print_chat, CAMPER_MSG)
	#endif
}

// ===============================================================================
// 	punish_c4camper - Punishing Player for being too long at C4
// ===============================================================================

public punish_c4camper(id)
{
	#if defined C4_BLAST
	create_blast_at_camper(id)
	#endif
	
	#if defined C4_SOUND
	emit_sound(id, CHAN_ITEM, C4_SOUND_FILE, VOL_NORM, ATTN_NORM, 0, PITCH_NORM );
	#endif
	
	#if defined C4_HEALTH
	set_user_health(id, get_user_health(id) - C4_HEALTH_AMOUNT)
	#endif
	
	#if defined C4_MONEY
	if(cs_get_user_money(id) >= C4_MONEY_AMOUNT)
		cs_set_user_money(id, cs_get_user_money(id) - C4_MONEY_AMOUNT)
	#endif
}

// ===============================================================================
// 	create_blast_at_camper - Creating a neat circle around camper
// ===============================================================================

public create_blast_at_camper(id)
{
	new origin[3]
	get_user_origin(id,origin)
	
	// blast circles
	message_begin( MSG_PAS, SVC_TEMPENTITY, origin )
	write_byte( TE_BEAMCYLINDER )
	write_coord( origin[0])
	write_coord( origin[1])
	write_coord( origin[2] - 16)
	write_coord( origin[0])
	write_coord( origin[1])
	write_coord( origin[2] - 16 + 250)
	write_short( m_iSpriteTexture )
	write_byte( 0 ) // startframe
	write_byte( 0 ) // framerate
	write_byte( 6 ) // life
	write_byte( 16 )  // width
	write_byte( 0 )	// noise
	write_byte( 255 )
	write_byte( 100 )
	write_byte( 0 )
	write_byte( 255 ) //brightness
	write_byte( 0 ) // speed
	message_end()
}
