/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <fakemeta>

#define PLUGIN "Hit Effects"
#define VERSION "1.0"
#define AUTHOR "Gad"

new gMsgScreenFade


public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	RegisterHam(Ham_TakeDamage, "player", "Damaged")
	
	
	gMsgScreenFade=get_user_msgid("ScreenFade")
	register_cvar("amx_hitsoundchance", "50")
	register_cvar("amx_blinddamage", "25")
	register_cvar("amx_shakedamage", "50")
}

public plugin_precache()
{
	precache_sound("[GG]Sounds/hit1.wav")
	precache_sound("[GG]Sounds/hit2.wav")
	precache_sound("[GG]Sounds/hit3.wav")
	precache_sound("[GG]Sounds/hit4.wav")
	precache_sound("[GG]Sounds/hit5.wav")
	precache_sound("[GG]Sounds/hit6.wav")
	precache_sound("[GG]Sounds/hit7.wav")
	precache_sound("[GG]Sounds/hit8.wav")

}


public blind(id, dmg)
{
	message_begin(MSG_ONE, gMsgScreenFade, _, id);
	write_short(600 + (dmg*100));
	write_short(600 + (dmg*100));
	write_short(4096);
	write_byte(random_num(50,255));
	write_byte(0);
	write_byte(0);
	write_byte(dmg + 75);
	message_end();
}

public twist(id, dmg)
{

	new Float:val = dmg * 0.5
	new Float:maxdeg = (val * 0.9)
	new Float:mindeg = (val * 0.4)

	new Float:pLook[3]
	for (new i = 0; i <= 2; i++) 
	{
		if (random_num(0,1) == 1)
			pLook[i] = random_float(mindeg,maxdeg)
		else
			pLook[i] = random_float(mindeg,maxdeg) * -1
	}

	
	
	
	set_pev(id, pev_punchangle, pLook)
	set_pev(id, pev_fixangle, 1 )

}

public hitsound(id)
{
	if (random_num(1,100) <= get_cvar_num("amx_hitsoundchance"))
	{
		switch(random_num(0, 7))
		{
			case 0:
			{
				emit_sound(id, CHAN_BODY, "gad/hit1.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				
			}
			case 1:
			{
				emit_sound(id, CHAN_BODY, "gad/hit2.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
			case 2:
			{
				emit_sound(id, CHAN_BODY, "gad/hit3.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
			case 3:
			{
				emit_sound(id, CHAN_BODY, "gad/hit4.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
			case 4:
			{
				emit_sound(id, CHAN_BODY, "gad/hit5.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
			case 5:
			{
				emit_sound(id, CHAN_BODY, "gad/hit6.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
			case 6:
			{
				emit_sound(id, CHAN_BODY, "gad/hit7.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
			case 7:
			{
				emit_sound(id, CHAN_BODY, "gad/hit8.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
		}
		

	}
	
}


public Damaged(id , inf , att , Float: damage , damage_bits )
{
	if (floatround(damage) > get_cvar_num("amx_blinddamage")) blind (id, floatround(damage))
	if (floatround(damage) > get_cvar_num("amx_shakedamage")) twist(id, floatround(damage))
	hitsound(id)
			
	return
	    
	
}

/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1045\\ f0\\ fs16 \n\\ par }
*/
